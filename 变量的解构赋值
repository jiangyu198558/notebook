ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring).
数组的解构赋值
基本用法： var [a, b, c] = [1, 2, 3];
let [foo, [[bar], baz]] = [1, [[2], 3]]; // 模式匹配
let [, , third] = ["foo", "bar", "baz"];  // third "baz"
let [x, , y] = [1, 2, 3,]; // x 1 y 3
let [head, ...tail] = [1, 2, 3, 4]; // head 1 tail [2,3,4]
let [x, y, ...z] = ['a']; // x 'a' y undefined z []
如果解构不成功，变量的值就等于undefined

var [foo] = [];
var [bar, foo] = [1]; 以上两种情况属于解构不成功，foo的值都会等于undefined
不完全解构： 即等号左边的模式，只匹配一部分的等号右边的数组。
let [x, y] = [1, 2, 3]; // x 1, y 2
let [a, [b], d] = [1, [2,3], 4]; // a 1, b 2, d 4

let [x, y, z] = new Set(["a", "b", "c"]); // x "a"

function* fibs(){
  var a = 0;
  var b = 1;
  while(true){
    yield a;
    [a, b] = [b, a+b];
  }
}

var [first, second, third, fourth, fifth, sixth] = fibs();
sixth // 5

默认值
解构赋值允许制定默认值
var [foo = true] = [];
foo // true

[x, y = 'b'] = ['a'];// x = 'a', y = 'b';
[x, y='b'] = ['a', undefined]; // x='a', y = 'b'
es6内部使用严格相等运算符（===），判断一个位置是否有值。所以如果一个数组成员不严格等于undefined，默认值是不会生效的。
var [x = 1] = [undefined]; // x = 1;
var [x = 1] = [null]; // x=null

默认值可以引用解构赋值的其他变量，但该变量必须已经声明
let [x = 1, y = x] = []; // x=1; y=1
let [x = 1, y = x] = [2]; // x=2; y=2
let [x = 1, y = x] = [1, 2]; // x=1; y=2
let [x = y, y = 1] = []; // ReferenceError

对象的解构赋值
var {foo, bar} = {foo: 'aaa', bar: 'bbb'};  // foo 'aaa' bar 'bbb'
var {baz} = {foo: 'aaa', bar: 'bbb'};   // baz undefined
let obj = {first: 'hello', last: 'world'};
let {first: f, last: l} = obj;      // f = 'hello', l = 'world';

对象的解构也可以指定默认值。
var {x = 3} = {}; // x = 3;
var {x, y=5} = {x: 1};//  x=1, y =5;
var { message: msg = "Something went wrong" } = {};   // msg = "Something went wrong"
默认值生效的条件是，对象的属性值严格等于 undefined 。


字符串的解构赋值
const [a,b,c,d,e] = 'hello';
let {length: len} = 'hello';  // len = 5;

数值和布尔值的解构赋值
let {toString: s} = 123;
s === Number.prototype.toString // true
let {toString: s} = true;
s === Boolean.prototype.toString // true
解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于 undefined 和 null 无法转为对象，所以对它们
进行解构赋值，都会报错。

函数参数的解构赋值
函数的参数也可以使用解构赋值
function add([x, y]){
  return x + y;
}
add([1, 2]);

[[1, 2], [3, 4]].map(([a,b])=>a+b);

function move({x=0, y=0} = {}) {
  return [x, y];
}
move({x: 3, y: 8});
move({x: 3});
move();
undefined 就会触发函数参数的默认值。
[1, undefined, 3].map((x='yes') =>x); // [1, 'yes', 3]

圆括号问题
不能使用圆括号的情况
以下三种解构赋值不得使用圆括号。
（1）变量声明语句中，不能带有圆括号。
（2）函数参数中，模式不能带有圆括号。
（3）赋值语句中，不能将整个模式，或嵌套模式中的一层，放在圆括号之中。
可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号

用途
变量的解构赋值用途很多。
（1）交换变量的值 [x, y] = [y, x];
（2）从函数返回多个值 
// 返回一个数组
function example(){
  return [1, 2, 3];
}
// 返回一个对象
var [a,b,c] = example(){
  return {
    foo: 1,
    bar: 2
  };
}
var {foo, bar} = example();
（3）函数参数的定义
// 参数是一组有次序的值
function f([x, y, z]) { ... }
f([1, 2, 3]);
// 参数是一组无次序的值
function f({x, y, z}) { ... }
f({z: 3, y: 2, x: 1});
（4）提取JSON数据
解构赋值对提取JSON对象中的数据，尤其有用。
var jsonData = {
id: 42,
status: "OK",
data: [867, 5309]
};
let { id, status, data: number } = jsonData;
console.log(id, status, number);
// 42, "OK", [867, 5309]
（5）函数参数的默认值
jQuery.ajax = function (url, {
async = true,
beforeSend = function () {},
cache = true,
complete = function () {},
crossDomain = false,
global = true,
// ... more config
}) {
// ... do stuff
};
指定参数的默认值，就避免了在函数体内部再写 var foo = config.foo || 'default foo'; 这样的语句。
（6）遍历Map结构 任何部署了Iterator接口的对象，都可以用 for...of 循环遍历。
var map = new Map();
map.set('first', 'hello');
map.set('second', 'world');
for (let [key, value] of map) {
console.log(key + " is " + value);
}
// first is hello
// second is world
// 获取键名
for (let [key] of map) {
// ...
}
// 获取键值
for (let [,value] of map) {
// ...
}
（7）输入模块的指定方法
加载模块时，往往需要指定输入那些方法。解构赋值使得输入语句非常清晰。
const { SourceMapConsumer, SourceNode } = require("source-map");
