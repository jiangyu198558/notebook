字符串的扩展
1、字符串的Unicode表示法 \uxxxx表示一个字符 只限于 \u0000--\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达。
JavaScript共有6种方法可以表示一个字符。
'\z' === 'z' // true
'\172' === 'z' // true
'\x7A' === 'z' // true
'\u007A' === 'z' // true
'\u{7A}' === 'z' // true

2、codePointAt()
JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码点大于
0xFFFF的字符），JavaScript会认为它们是两个字符。charCodeAt 方法只能分别返回前两个字节和后两个字节的值。
ES6提供了 codePointAt 方法，能够正确处理4个字节储存的字符，返回一个字符的码点。
var s = '􀀁a';
s.codePointAt(0) // 134071
s.codePointAt(1) // 57271
s.charCodeAt(2) // 97

s.codePointAt(0).toString(16) // "20bb7"
s.charCodeAt(2).toString(16) // "61"
var s = '􀀁a';
for (let ch of s) {
console.log(ch.codePointAt(0).toString(16));
}
// 20bb7
// 61
codePointAt 方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。
function is32Bit(c) {
  return c.codePointAt(0) > 0xFFFF;
}
is32Bit("􀀁") // true
is32Bit("a") // false

3、String.fromCodePoint()
ES6提供了 String.fromCodePoint 方法，可以识别 0xFFFF 的字符，弥补了 String.fromCharCode 方法的不足。在作用
上，正好与 codePointAt 方法相反。

4、字符串的遍历器接口
ES6为字符串添加了遍历器接口（详见《Iterator》一章），使得字符串可以被 for...of 循环遍历。
for (let codePoint of 'foo') {
console.log(codePoint)
}
// "f"
// "o"
// "o"

5、at()
ES5对字符串对象提供charAt方法，返回字符串给定位置的字符。该方法不能识别码点大于 0xFFFF 的字符。

6、normalize() 
ES6提供字符串实例的 normalize() 方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。
normalize 方法可以接受四个参数。
NFC ，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所
谓“标准等价”指的是视觉和语义上的等价。
NFD ，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解
的多个简单字符。
NFKC ，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语
义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例， normalize 方法不能识别中文。）
NFKD ，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符
分解的多个简单字符。
'\u004F\u030C'.normalize('NFC').length // 1
'\u004F\u030C'.normalize('NFD').length // 2
上面代码表示， NFC 参数返回字符的合成形式， NFD 参数返回字符的分解形式。
normalize 方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过Unicode编号
区间判断。

7、includes(), startsWith(), endsWith()
includes(): 返回布尔值，表示是否找到了参数字符串。
startsWith(): 返回布尔值，表示参数字符串是否在源字符串的头部。
endsWith(): 返回布尔值，表示参数字符串是否在源字符串的尾部。
var s = 'Hello world!';
s.startsWith('Hello');  // true
s.endsWith('!');         // true
s.includes('o');        // true

s.startsWith('world', 6);   // true
s.endsWith('Hello', 5);   // true
s.includes('Hello', 6); // false

8、repeat()
repeat方法返回一个新字符串，表示将原字符串重复n次
'x'.repeat(3);  // 'xxx'
'hello'.repeat(2); // 'hellohello'
'na'.repeat(0);   // ''

参数如果是小数，会被取整  'na'.repeat(2.9)  // 'nana'
参数是负数或者Infinity,会报错
如果参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后等于 -
0 ， repeat 视同为0。
参数 NaN 等同于0。
repeat 的参数是字符串，则会先转换成数字。

9、padStart(), padEnd()
ES7推出了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。 padStart 用于头部补
全， padEnd 用于尾部补全。
'x'.padStart(5, 'ab') // 'ababx'
'x'.padStart(4, 'ab') // 'abax'
'x'.padEnd(5, 'ab') // 'xabab'
'x'.padEnd(4, 'ab') // 'xaba'
如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。
如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。
'abc'.padStart(10, '0123456789')
// '0123456abc'
如果省略第二个参数，则会用空格补全长度。
'x'.padStart(4) // ' x'
'x'.padEnd(4) // 'x '
padStart 的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。
'1'.padStart(10, '0') // "0000000001"
'12'.padStart(10, '0') // "0000000012"
'123456'.padStart(10, '0') // "0000123456"
另一个用途是提示字符串格式。
'12'.padStart(10, 'YYYY-MM-DD') // "YYYY-MM-12"
'09-12'.padStart(10, 'YYYY-MM-DD') // "YYYY-09-12"

10、模板字符串
模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符
串，或者在字符串中嵌入变量。
// 普通字符串
`In JavaScript '\n' is a line-feed.`
// 多行字符串
`In JavaScript this is
not legal.`
console.log(`string text line 1
string text line 2`);
// 字符串中嵌入变量
var name = "Bob", time = "today";
`Hello ${name}, how are you ${time}?`
如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。
$("#warning").html(`
<h1>Watch out!</h1>
<p>Unauthorized hockeying can result in penalties
of up to ${maxPenalty} minutes.</p>
`);
模板字符串中嵌入变量，需要将变量名写在 ${} 之中。
function authorize(user, action) {
if (!user.hasPrivilege(action)) {
throw new Error(
// 传统写法为
// 'User '
// + user.name
// + ' is not authorized to do '
// + action
// + '.'
`User ${user.name} is not authorized to do ${action}.`);
}
}

// 写法一
let str = 'return ' + '`Hello ${name}!`';
let func = new Function('name', str);
func('Jack') // "Hello Jack!"
// 写法二
let str = '(name) => `Hello ${name}!`';
let func = eval.call(null, str);
func('Jack') // "Hello Jack!"

var template = `
<ul>
    <% for(var i=0; i<data.supplies.length; i++) { %>
        <li><%= data.supplies[i] %></li>
    <% } %>
</ul>
`;

echo('<ul>');
for(var i=0; i<data.supplies.length; i++){
    echo('<li>');
    echo(data.supplies[i]);
    echo('</li>');
};
echo('</ul>');

// 这个转换使用正则表达式就行了
var evalExpr = /<%=(.+?)%>/g;
var expr = /<%([\s\S]+?)%>/g;

template = template.replace(evalExpr, '`);\n echo($1); \n echo(`').replace(expr, '`);\n $1 \n echo(`');
template = 'echo(`' + template + '`);';

var script = `(function parse(data){
    var output = "";

    function echo(html){
        output += html;
    }

    ${template}

    return output;
})`;
return script;

function compile(template){
    var evalExpr = /<%=(.+?)%>/g;
    var expr = /<%([\s\S]+?)%>/g;

    template = 'echo(`'+template+'`);';

    var script = `(function parse(data){
        var output = '';
        function echo(html){
            output += html;
        }

        ${template}

        return output;
    })`;
    return script;
}

var parse = eval(compile(template));
div.innerHTML = parse({supplies: ["broom", "mop", "cleaner"]});

11、标签模板
模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标
签模板”功能（tagged template）。
alert`123`
// 等同于
alert(123)
“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。
var a = 5;
var b = 10;
tag`Hello ${a+b} world ${a*b}`;
“标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容。

12、String.raw()
String.raw方法，用来充当模板字符串的处理函数，返回一个斜杠都被转义的字符串，对应于替换变量后的模板字符串。
String.raw`Hi\n${2+3}!`;
// "Hi\\n5!"
String.raw`Hi\u000A!`;
// 'Hi\\u000A!'

String.raw = function(strings, ...values){
  var output = "";
  for(var index = 0; index < values.length; index++){
    output += strings.raw[index] + values[index];
  }
  
  output += strings.raw[index];
  return output;
}
