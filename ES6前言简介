ES6 是JS的一个版本标准，目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。
标准的制定者计划，每年发布一次标准，ES6是2015年发布的，所以又称ECMAScript2015.

Babel转码器
Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。
例子：
// 转码前
input.map(item=>item + 1);
// 转码后
input.map(function(item){
  return item + 1;
});
配置文件.babelrc
Babel的配置文件是.babelrc，存放在项目的根目录下。
该文件用来设置转码规则和插件，基本格式如下：
{
  "presets": [],
  "plugins": []
}
presets字段设定转码规则，官方提供一下的规则集，
ES2015转码规则
npm install --save-dev babel-preset-es2015

react转码规则
npm install --save-dev babel-preset-react

ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个
npm install --save-dev babel-preset-stage-0
npm install --save-dev babel-preset-stage-1
npm install --save-dev babel-preset-stage-2
npm install --save-dev babel-preset-stage-3
规则加入.babelrc
{
  "presets": [
    "es2015",
    "react",
    "stage-2"
  ],
  "plugins": []
}

以下所有Babel工具和模块的使用，都必须写好.babelrc

命令行转码babel-cli
Babel提供babel-cli工具，用于命令行转码
全局安装命令如下：npm install --global babel-cli
基本用法如下：babel example.js
转码结果写入一个文件
babel example.js --out-file compiled.js 或 babel example.js -o compiled.js
整个目录转码
# --out-dir 或 -d 参数指定输出目录
babel src --out-dir lib 或 babel src -d lib
#-s 参数生成source map文件
babel src -d lib -s

项目依赖安装
npm install --save-dev babel-cli
改写package.json
{
  //...
  "devDependencies":{
    "babel-cli": "^6.0.0"
  },
  "scripts": {
    "build": "babel src -d lib"
  },
}
执行命令： npm run build
