let命令
基本用法：用来声明变量。类似于var，所声明的变量，只在let命令所在的代码块内有效。
{
  let a = 10;
  var b = 1;
}
a // ReferenceError: a is not defined.
b // 1

for(let i =0; i<arr.length; i++){}
console.log(i);
// ReferenceError: i is not defined
i只在for循环体内有效。

var a = [];
for(var i =0; i<10; i++){
  a[i] = function(){
    console.log(i);
  };
}
a[6](); // 10

var a = [];
for(let i=0; i<10; i++){
  a[i] = function(){
    console.log(i);
  };
}
a[6](); // 6

不存在变量提升
let 不像var那样会发生"变量提升"现象。变量一定要在声明后使用，否则报错。
console.log(foo); // 输出undefined
console.log(bar); // 报错ReferenceError

var foo = 2;
let bar = 2;

暂时性死区
只要块级作用域内存在let命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。
var tmp = 123;
if(true){
  tmp = 'abc';  // ReferenceError
  let tmp;
}

ES6明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是
在声明之前就使用这些变量，就会报错。

ES6规定暂时性死区和不存在变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。

不允许重复声明
let不允许在相同作用域内，重复声明同一个变量。
// 报错
function () {
  let a = 10;
  var a = 1;
}
// 报错
function () {
  let a = 10;
  let a = 1;
}

function func(arg) {
  let arg; // 报错
}
function func(arg) {
  {
    let arg; // 不报错
  }
}

块级作用域
为什么需要块级作用域？
1、内层变量可能会覆盖外层变量。
var tmp = new Date();
function f() {
console.log(tmp);
if (false) {
var tmp = "hello world";
}
}
f(); // undefined
2、用来计数的循环变量泄露为全局变量。
var s = 'hello';
for (var i = 0; i < s.length; i++) {
console.log(s[i]);
}
console.log(i); // 5
上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。

ES6的块级作用域
let实际上为JavaScript新增了块级作用域。
function f1() {
let n = 5;
if (true) {
let n = 10;
}
console.log(n); // 5
}
ES6允许块级作用域的任意嵌套。外层作用域无法读取内层作用域的变量。
内层作用域可以定义外层作用域的同名变量。
块级作用域的出现，实际上使得获得广泛应用的立即执行匿名函数（IIFE）不再必要了。

const命令
const声明一个只读的常量。一旦声明，常量的值就不能改变。
'use strict';
const PI = 3.1415;
PI  // 3.1415
PI = 3; // TypeError： “PI” is read-only

const一旦声明变量，就必须立即初始化，不能留到以后赋值。

const的作用域与let命令相同：只在声明所在的块级作用域内有效。

const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。

ES5只有两种声明变量的方法： var 命令和 function 命令。ES6除了添加 let 和 const 命令，另外
两种声明变量的方法： import 命令和 class 命令。所以，ES6一共有6种声明变量的方法。

全局对象的属性
全局对象是最顶层的对象，在浏览器环境指的是window对象，在node.js中指的是global对象。ES5中，全局对象的属性与全局变量是等价的。
