1、RegExp构造函数
var regex = new RegExp('xyz', 'i'); 等价于 var regex = /xyz/i;

var regex = new RegExp(/xyz/i); 等价于 var regex = /xyz/i;

var regex = new RegExp(/xyz/, 'i'); // ES5不允许此时使用第二个参数，添加修饰符，否则会报错。
// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another
ES6改变了这种行为
new RegExp(/abc/ig, 'i').flags

2、字符串的正则方法
字符串对象共有4个方法，可以使用正则表达式：match()、replace()、search()和split()。
ES6将这4个方法，在语言内部全部调用RegExp的实例方法，从而做到所有与正则相关的方法，全都定义在RegExp对象上。
String.prototype.match 调用 RegExp.prototype[Symbol.match]
String.prototype.replace 调用 RegExp.prototype[Symbol.replace]
String.prototype.search 调用 RegExp.prototype[Symbol.search]
String.prototype.split 调用 RegExp.prototype[Symbol.split]

3、u修饰符
ES6对正则表达式添加了 u 修饰符，含义为“Unicode模式”，用来正确处理大于 \uFFFF 的Unicode字符.会正确处理四个字节的UTF-16编码。
（1）点字符
（2）Unicode字符表示法
（3）量词
（4）预定义模式
写出一个正确返回字符串长度的函数
function codePointLength(text){
  var result = text.match(/[\s\S]/gu);
  return result?result.length:0;
}
var s = '吉吉'; s.length // 4 codePointLength(s); // 2
（5）i修饰符

4、y修饰符
y 修饰符，叫做“粘连”（sticky）修饰符
y 修饰符的作用与 g 修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在
于， g 修饰符只要剩余位置中存在匹配就可，而 y 修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。
